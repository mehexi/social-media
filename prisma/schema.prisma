generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                 String         @id @default(auto()) @map("_id") @db.ObjectId
  clerkUserId        String         @unique
  userName           String         @unique
  profilePicture     String?
  bio                String?
  createdAt          DateTime       @default(now())
  tweets             Tweet[]        @relation()
  pinnedTweetsID     PinnedTweets[] @relation()
  tweetIds           String[]       @default([])
  bookmarks          Bookmark[]     @relation("UserBookmarks")
  notifications      Notification[] @relation("UserNotifications") // Notifications received
  triggeredNotifications Notification[] @relation("ActorNotifications") // Notifications triggered
  messagesSent       Message[]      @relation("SentMessages")
  likes              String[]       @default([])
  messagesReceived   Message[]      @relation("ReceivedMessages")
  
  following          Follow[] @relation("UserFollowing")
  followers          Follow[] @relation("UserFollowers")
}

model Follow {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  followerId  String    @db.ObjectId
  followeeId  String    @db.ObjectId
  
  follower    User      @relation("UserFollowers", fields: [followerId], references: [id])
  followee    User      @relation("UserFollowing", fields: [followeeId], references: [id])
}

model Tweet {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  content       String
  image         String[]
  createdAt     DateTime   @default(now())
  updatedAt     DateTime?   @updatedAt
  userId        String
  user          User       @relation(fields: [userId], references: [clerkUserId])
  parentTweetId String?    @db.ObjectId
  parentTweet   Tweet?     @relation("Replies", fields: [parentTweetId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies       Tweet[]    @relation("Replies")
  pinnedTweet   PinnedTweets[] @relation()
  bookmarks     Bookmark[]
  likes         String[]   @default([])
  likeCount     Int        @default(0)
  hasImage      Boolean    @default(false)
}

model Notification {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  type        String
  content     String
  read        Boolean   @default(false)
  createdAt   DateTime  @default(now())
  actorId     String?   @db.ObjectId
  actor       User?     @relation("ActorNotifications", fields: [actorId], references: [id])
  userId      String    @db.ObjectId
  user        User      @relation("UserNotifications", fields: [userId], references: [id])
}

model Bookmark {
  id      String @id @default(auto()) @map("_id") @db.ObjectId
  tweetId String @db.ObjectId
  tweet   Tweet  @relation(fields: [tweetId], references: [id])
  userId  String @db.ObjectId
  user    User   @relation("UserBookmarks", fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model PinnedTweets {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  tweetId   String   @db.ObjectId
  tweet     Tweet    @relation(fields: [tweetId], references: [id])
  createdAt DateTime @default(now())
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  createdAt  DateTime @default(now())
  senderId   String   @db.ObjectId
  receiverId String   @db.ObjectId
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

model Like {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  tweetId   String   @db.ObjectId
  createdAt DateTime @default(now())
}
